cps$M = ifelse(cps$marital %in% c(1,2,3), 1, 0)
cps = read.csv("/Users/denistchaouchev/Dropbox/Stanford/Fall 2023/ECON270/Final/cps09mar.csv")
cps$Y = ifelse(cps$union==1, 1, 0)
cps$M = ifelse(cps$marital %in% c(1,2,3), 1, 0)
logmdl = glm(Y ~ Mdata = cps, family=binomial)
stargazer(logmdl, header=FALSE, type="latexß")
logmdl = glm(Y ~ M,data=  cps, family=binomial)
stargazer(logmdl, header=FALSE, type="latexß")
stargazer(logmdl, header=FALSE, type="latex")
rm(list=ls())
library(readxl)
library(rgdal)
library(sf)
library(ggplot2)
library(dplyr)
library(estimatr)
library(lfe)
library(interflex)
library(texreg)
library(stargazer)
library(sandwich)
library(msm)
library(pscl)
library(MASS)
library(lmtest)
library(rnaturalearth)
library(rnaturalearthdata)
library(raster)
library(sp)
library(HiClimR)
library(gridExtra)
library(patchwork)
library(AER)
#europe1400 = st_read("/Users/denistchaouchev/Dropbox/prosp/empirical/states1400/")
#provinces = st_read("/Users/denistchaouchev/Dropbox/prosp/empirical/provinces/province1450.shp")
provinces = st_read("/Users/denistchaouchev/Dropbox/prosp/empirical/dioceses/diocese1450.shp")
provinces <- st_make_valid(provinces)
provinces = subset(provinces, !(Country_Mo %in% c("Greenland", "Iceland", "Cyprus")))
provinces = subset(provinces, !(Dioc_Prov_ %in% c("Canarias", "Faroe Islands")))
sieges = read_excel("/Users/denistchaouchev/Dropbox/prosp/empirical/sieges1443_1463.xlsx")
sieges$Long = sieges$Long
sieges$Lat = sieges$Lat
sf_use_s2(T)
siege_df = st_as_sf(sieges, coords = c("Long", "Lat"))
st_crs(siege_df) = st_crs(provinces)
world = ne_countries(scale = "medium", returnclass = "sf")
world = world[,"sovereignt"]
world = st_make_valid(world)
st_crs(world) = st_crs(provinces)
#world = st_transform(world, st_crs(provinces))
#sf_use_s2(TRUE)
#europe = st_make_valid(europe)
europe = st_crop(world, st_bbox(provinces))
europe_comb = st_union(europe)
sieges_pre1453 = subset(siege_df, StartYear <= 1452)
sieges_post1453 = subset(siege_df, StartYear > 1452)
province_centroid = st_centroid(provinces)
# coordinates of constantinople 41.013889, 28.955556
constantinople = st_sfc(st_point(c(28.955556,41.013889)))
st_crs(constantinople) = st_crs(provinces)
dists = st_distance(constantinople, province_centroid)
province_centroid$distances = dists[1,]
province_centroid$lat = st_coordinates(province_centroid)[,2]
province_centroid$long = st_coordinates(province_centroid)[,1]
province_centroid = st_drop_geometry(province_centroid)
provinces = merge(provinces, province_centroid, by="DioceseID")
sieges_by_province_pre = st_intersection(sieges_pre1453, provinces)
sieges_by_province_pre = st_drop_geometry(sieges_by_province_pre)
sieges_by_province_post = st_intersection(sieges_post1453, provinces)
sieges_by_province_post = st_drop_geometry(sieges_by_province_post)
pre_data = sieges_by_province_pre %>%
group_by(DioceseID, Dioc_Prov_.x, distances) %>%
summarise(siege_count = n()) %>%
rename(Province = Dioc_Prov_.x) %>%
merge(provinces, by="DioceseID", all=T) %>%
dplyr::select(DioceseID, Dioc_Prov_.x, Country_Mo.x, siege_count, distances.y, lat, long) %>%
mutate(post=0) %>%
rename(Province = Dioc_Prov_.x,
Country = Country_Mo.x,
distance = distances.y)
pre_data$siege_count = ifelse(is.na(pre_data$siege_count), 0, pre_data$siege_count)
post_data = sieges_by_province_post %>%
group_by(DioceseID, Dioc_Prov_.x, distances) %>%
summarise(siege_count = n())  %>%
rename(Province = Dioc_Prov_.x) %>%
merge(provinces, by="DioceseID", all=T) %>%
dplyr::select(DioceseID, Dioc_Prov_.x, Country_Mo.x, siege_count, distances.y, lat, long) %>%
mutate(post=1) %>%
rename(Province = Dioc_Prov_.x,
Country = Country_Mo.x,
distance = distances.y)
post_data$siege_count = ifelse(is.na(post_data$siege_count), 0, post_data$siege_count)
final_data = rbind(pre_data, post_data)
final_data$distance = as.vector(final_data$distance)
final_data$distance = final_data$distance/1000
final_data$had_siege = ifelse(final_data$siege_count>0, 1,0)
ggplot(final_data) +
geom_histogram(aes(x=siege_count)) +
xlab("Number of Sieges in Diocese") +
ylab("Count") +
theme_minimal()
sieges %>%
group_by(StartYear) %>%
summarise(total_siege = n()) %>%
ggplot() + geom_line(aes(x=StartYear, y = total_siege),color='steelblue') +
xlim(1443,1461) + xlab("Year") + ylab("Number of Sieges") +
ggtitle("Sieges in Europe by Year (1443-1462)") +
#geom_smooth(aes(x=StartYear, y = total_siege), method="lm") +
theme_minimal()
sieges %>%
group_by(StartYear) %>%
summarise(total_siege = n()) %>%
ggplot() + geom_line(aes(x=StartYear, y = total_siege),color='steelblue') +
xlim(1443,1461) + xlab("Year") + ylab("Number of Sieges") +
ggtitle("Sieges in Europe by Year (1443-1462)") +
geom_smooth(aes(x=StartYear, y = total_siege), method="lm") +
theme_minimal()
sieges %>%
group_by(StartYear) %>%
summarise(total_siege = n()) %>%
ggplot() + geom_line(aes(x=StartYear, y = total_siege),color='steelblue') +
xlim(1443,1461) + xlab("Year") + ylab("Number of Sieges") +
ggtitle("Sieges in Europe by Year (1443-1462)") +
#geom_smooth(aes(x=StartYear, y = total_siege), method="lm") +
theme_minimal()
sieges %>%
group_by(StartYear) %>%
summarise(total_siege = n()) %>%
ggplot() + geom_line(aes(x=StartYear, y = total_siege),color='black') +
xlim(1443,1461) + xlab("Year") + ylab("Number of Sieges") +
ggtitle("Sieges in Europe by Year (1443-1462)") +
#geom_smooth(aes(x=StartYear, y = total_siege), method="lm") +
theme_minimal()
final_data$distance
quantile(post_data$distance, .25)
quantile(post_data$distance, .75)
sieges_by_province_pre = st_intersection(sieges_pre1453, provinces)
sieges_by_province_pre = st_drop_geometry(sieges_by_province_pre)
sieges_by_province_post = st_intersection(sieges_post1453, provinces)
sieges_by_province_post = st_drop_geometry(sieges_by_province_post)
pre_data = sieges_by_province_pre %>%
group_by(DioceseID, Dioc_Prov_.x, distances) %>%
summarise(siege_count = n()) %>%
rename(Province = Dioc_Prov_.x) %>%
merge(provinces, by="DioceseID", all=T) %>%
dplyr::select(DioceseID, Dioc_Prov_.x, Country_Mo.x, siege_count, distances.y, lat, long) %>%
mutate(post=0) %>%
rename(Province = Dioc_Prov_.x,
Country = Country_Mo.x,
distance = distances.y)
pre_data$siege_count = ifelse(is.na(pre_data$siege_count), 0, pre_data$siege_count)
post_data = sieges_by_province_post %>%
group_by(DioceseID, Dioc_Prov_.x, distances) %>%
summarise(siege_count = n())  %>%
rename(Province = Dioc_Prov_.x) %>%
merge(provinces, by="DioceseID", all=T) %>%
dplyr::select(DioceseID, Dioc_Prov_.x, Country_Mo.x, siege_count, distances.y, lat, long) %>%
mutate(post=1) %>%
rename(Province = Dioc_Prov_.x,
Country = Country_Mo.x,
distance = distances.y)
post_data$siege_count = ifelse(is.na(post_data$siege_count), 0, post_data$siege_count)
final_data = rbind(pre_data, post_data)
final_data$distance = as.vector(final_data$distance)
final_data$distance = final_data$distance/1000
final_data$had_siege = ifelse(final_data$siege_count>0, 1,0)
quantile(final_data$distance, .25)
quantile(final_data$distance, .75)
quantile(final_data$distance, .75) - quantile(final_data$distance, .25)
e^.007
exp(.007)
sieges %>%
group_by(StartYear) %>%
summarise(total_siege = n()) %>%
ggplot() + geom_line(aes(x=StartYear, y = total_siege),color='black') +
xlim(1443,1461) + xlab("Year") + ylab("Number of Sieges") +
ggtitle("Sieges in Europe by Year (1443-1462)") +
#geom_smooth(aes(x=StartYear, y = total_siege), method="lm") +
theme_minimal()
ggsave("sieges_time_plot.png", path = "/Users/denistchaouchev/Dropbox/prosp/empirical", dpi="retina")
f = function(x){
out = 3 * log(x, base=2) - x
return(out)
}
df = function(x) {
out = 3/(x * log(2)) - 1
return(out)
}
xi = x0
m = 50
# newton for fun
for (i in 1:m) {
xip1 = xi - f(xi)/df(xi)
print(xip1)
xi = xipl1
}
xi = x0
m = 50
x0 = 1
f = function(x){
out = 3 * log(x, base=2) - x
return(out)
}
df = function(x) {
out = 3/(x * log(2)) - 1
return(out)
}
xi = x0
m = 50
# newton for fun
for (i in 1:m) {
xip1 = xi - f(xi)/df(xi)
print(xip1)
xi = xipl1
}
x0 = 1
f = function(x){
out = 3 * log(x, base=2) - x
return(out)
}
df = function(x) {
out = 3/(x * log(2)) - 1
return(out)
}
xi = x0
m = 50
# newton for fun
for (i in 1:m) {
xip1 = xi - f(xi)/df(xi)
print(xip1)
xi = xip1
}
x0 = 1500
f = function(x){
out = 3 * log(x, base=2) - x
return(out)
}
df = function(x) {
out = 3/(x * log(2)) - 1
return(out)
}
xi = x0
m = 50
# newton for fun
for (i in 1:m) {
xip1 = xi - f(xi)/df(xi)
print(xip1)
xi = xip1
}
xi^3
2^xi
m = 10
# newton for fun
for (i in 1:m) {
xip1 = xi - f(xi)/df(xi)
print(xip1)
xi = xip1
}
xi = x0
m = 10
# newton for fun
for (i in 1:m) {
xip1 = xi - f(xi)/df(xi)
print(xip1)
xi = xip1
}
x0 = 1500
f = function(x){
out = x^log(5, base = 2) - 5^(log(x, base=2))
return(out)
}
df = function(x) {
out = log(5, base = 2)*x^(log(5, base = 2) - 1) - (5^(log(x)/log(2)))*log(5)/(x*log(2))
return(out)
}
xi = x0
m = 10
# newton for fun
for (i in 1:m) {
xip1 = xi - f(xi)/df(xi)
print(xip1)
xi = xip1
}
x0 = 1500
f = function(x){
out = x^log(5, base = 2) - 5^(log(x, base=2))
return(out)
}
df = function(x) {
out = log(5, base = 2)*x^(log(5, base = 2) - 1) - (5^(log(x)/log(2)))*log(5)/(x*log(2))
return(out)
}
xi = x0
m = 100
# newton for fun
for (i in 1:m) {
xip1 = xi - f(xi)/df(xi)
print(xip1)
xi = xip1
}
f(1)
f(2)
f(3)
f(500)
f(5000)
f(5000000)
rm(list=ls())
library(ggplot2)
library(shiny)
trade = read.csv("/Users/denistchaouchev/Documents/China_Tilt/Data/Processed/trade.csv")
rm(list=ls())
library(ggplot2)
library(shiny)
trade = read.csv("/Users/denistchaouchev/Documents/China_Tilt/Data/Processed/trade.csv")
# Define UI ----
ui <- fluidPage(
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
View(trade)
rm(list=ls())
library(ggplot2)
library(shiny)
trade = read.csv("/Users/denistchaouchev/Documents/China_Tilt/Data/Processed/trade.csv")
# Define UI ----
ui <- fluidPage(
)
# Define server logic ----
server <- function(input, output) {
output$plot = renderPlot({
ggplot(trade) + geom_line(x=Year, y=imports_chn_prop)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
rm(list=ls())
library(ggplot2)
library(shiny)
trade = read.csv("/Users/denistchaouchev/Documents/China_Tilt/Data/Processed/trade.csv")
# Define UI ----
ui <- fluidPage(
plotOutput("plot", click = "plot_click")
)
# Define server logic ----
server <- function(input, output) {
output$plot = renderPlot({
ggplot(trade) + geom_line(x=Year, y=imports_chn_prop)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
View(trade)
rm(list=ls())
library(ggplot2)
library(shiny)
trade = read.csv("/Users/denistchaouchev/Documents/China_Tilt/Data/Processed/trade.csv")
# Define UI ----
ui <- fluidPage(
plotOutput("plot", click = "plot_click")
)
# Define server logic ----
server <- function(input, output) {
output$plot = renderPlot({
ggplot(trade) + geom_line(aes(x=Year, y=imports_chn_prop))
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
rm(list=ls())
library(ggplot2)
library(shiny)
trade = read.csv("/Users/denistchaouchev/Documents/China_Tilt/Data/Processed/trade.csv")
# Define UI ----
ui <- fluidPage(
plotOutput("plot", click = "plot_click")
)
# Define server logic ----
server <- function(input, output) {
output$plot = renderPlot({
ggplot(trade) + geom_line(aes(x=Year, y=imports_chn_prop, color="ISO"))
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
rm(list=ls())
library(ggplot2)
library(shiny)
trade = read.csv("/Users/denistchaouchev/Documents/China_Tilt/Data/Processed/trade.csv")
# Define UI ----
ui <- fluidPage(
plotOutput("plot", click = "plot_click")
)
# Define server logic ----
server <- function(input, output) {
output$plot = renderPlot({
ggplot(trade[which(trade$ISO=="BGR"),]) + geom_line(aes(x=Year, y=imports_chn_prop, color="ISO"))
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
rm(list=ls())
library(ggplot2)
library(shiny)
trade = read.csv("/Users/denistchaouchev/Documents/China_Tilt/Data/Processed/trade.csv")
# Define UI ----
ui <- fluidPage(
plotOutput("plot", click = "plot_click")
)
# Define server logic ----
server <- function(input, output) {
output$plot = renderPlot({
ggplot(trade[which(trade$ISO=="BGR"),]) + geom_line(aes(x=Year, y=imports_chn_prop, color=ISO))
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
rm(list=ls())
library(ggplot2)
library(shiny)
trade = read.csv("/Users/denistchaouchev/Documents/China_Tilt/Data/Processed/trade.csv")
# Define UI ----
ui <- fluidPage(
plotOutput("plot", click = "plot_click")
)
# Define server logic ----
server <- function(input, output) {
output$plot = renderPlot({
ggplot(trade) + geom_line(aes(x=Year, y=imports_chn_prop, color=ISO))
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
rm(list=ls())
library(ggplot2)
library(shiny)
trade = read.csv("/Users/denistchaouchev/Documents/China_Tilt/Data/Processed/trade.csv")
# Define UI ----
ui <- fluidPage(
titlePanel("China Tilt Data Explorer"),
plotOutput("plot", click = "plot_click")
)
# Define server logic ----
server <- function(input, output) {
output$plot = renderPlot({
ggplot(trade) + geom_line(aes(x=Year, y=imports_chn_prop, color=ISO))
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
runApp('Documents/China_Tilt/Code/10_shiny.R')
runApp('Documents/China_Tilt/Code/10_shiny.R')
runApp('Documents/China_Tilt/Code/10_shiny.R')
install.packages(c("shinylive", "httpuv"))
install.packages(c("shinylive", "httpuv"))
install.packages(c("shinylive", "httpuv"))
rm(list=ls())
library(ggplot2)
library(shiny)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
trade = read.csv("./trade.csv")
rm(list=ls())
library(ggplot2)
library(shiny)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
trade = read.csv("./trade.csv")
# Define UI ----
ui <- fluidPage(
titlePanel("China Tilt Data Explorer"),
sidebarLayout(
sidebarPanel(
selectInput("country", "Country", choices = unique(trade$ISO)),
selectInput("variable", "Variable",
choices = c("Exports to China", "Imports from China", "Exports to USA", "Imports from USA"))
),
mainPanel(
plotOutput("plot", click = "plot_click")
)
))
# Define server logic ----
server <- function(input, output) {
output$plot = renderPlot({
if (input$variable=="Exports to China") {
ggplot(trade[which(trade$ISO==input$country),]) +
geom_line(aes(x=Year, y=exports_chn_prop, color=ISO)) +
ylab(input$variable) +
theme_minimal()
} else if (input$variable=="Imports from China") {
ggplot(trade[which(trade$ISO==input$country),]) +
geom_line(aes(x=Year, y=imports_chn_prop, color=ISO)) +
ylab(input$variable) +
theme_minimal()
} else if (input$variable=="Exports to USA") {
ggplot(trade[which(trade$ISO==input$country),]) +
geom_line(aes(x=Year, y=exports_usa_prop, color=ISO)) +
ylab(input$variable) +
theme_minimal()
} else if (input$variable=="Imports from USA") {
ggplot(trade[which(trade$ISO==input$country),]) +
geom_line(aes(x=Year, y=imports_usa_prop, color=ISO)) +
ylab(input$variable) +
theme_minimal()
}
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
shinylive::export(appdir = "myapp", destdir = "docs")
